/// <reference types="node" />
import { RawGtv } from "../gtv/types";
import { BufferSignerPair, SignerPair } from "../gtx/types";
import { Path, StringPath } from "../merkle/types";
export declare type RestClientConfig = {
    endpointPool: readonly string[];
    pool: {
        maxSockets: number;
    };
    pollingInterval: number;
    attemptsPerEndpoint: number;
    attemptInterval: number;
};
export declare type RequestOptions = {
    method: string;
    url: string;
    json: boolean;
    body?: object;
    pool: {
        maxSockets: number;
    };
};
export declare type QueryObject = {
    type: string;
    [arg: string]: RawGtv;
};
export declare type ServerReturnProof = {
    hash: string;
    blockHeader: string;
    signatures: SignerPair[];
    merklePath: StringPath;
};
export declare type ResponseObjectProof = {
    hash: Buffer;
    blockHeader: Buffer;
    signatures: BufferSignerPair[];
    merklePath: Path;
};
export declare enum ResponseStatus {
    Confirmed = "confirmed",
    Rejected = "rejected",
    Unknown = "unknown",
    Waiting = "waiting"
}
export declare type TransactionObject = {
    tx: string;
};
export declare type StatusObject = {
    status: ResponseStatus;
    rejectReason?: string;
};
export declare type PostRequestObjects = TransactionObject | QueryObject;
export declare type GetResponseObjects = StatusObject | TransactionObject | ServerReturnProof;
export declare type FailOverConfig = {
    attemptsPerEndpoint?: number;
    attemptInterval?: number;
};
export declare type ResponseObject = {
    error: Error;
    statusCode: number;
    rspBody: any;
};
export declare enum Method {
    GET = "get",
    POST = "post"
}
