/// <reference types="node" />
import { GTX, RawGtxBody } from "./types";
import { RawGtv } from "../gtv/types";
export declare function emptyGtx(blockchainRID: Buffer): GTX;
/**
 * Adds a function call to a GTX. Creates a new GTX if none specified.
 * This function will throw Error if gtx is already signed
 * @param opName the name of the function to call
 * @param args the array of arguments of the function call. If no args, this must be an empty array
 * @param gtx the function call will be added to this gtx
 * @returns the gtx
 * @throws if gtx is null or if gtx is already signed
 */
export declare function addTransactionToGtx(opName: string, args: RawGtv[], gtx: GTX): GTX;
export declare function addSignerToGtx(signer: Buffer, gtx: GTX): void;
/**
 * Serializes the gtx for signing
 * @param gtx the gtx to serialize
 */
export declare function getDigestToSign(gtx: GTX): Buffer;
export declare function gtvTxBody(gtx: GTX): RawGtxBody;
/**
 * Signs the gtx with the provided privKey. This is a convenience function
 * for situations where you don't have to ask someone else to sign.
 */
export declare function sign(privKey: Buffer, pubKey: Buffer, gtx: any): void;
export declare function signRawTransaction(keyPair: Buffer, rawTransaction: Buffer): void;
/**
 * Adds a signature to the gtx
 */
export declare function addSignature(pubKeyBuffer: Buffer, signatureBuffer: Buffer, gtx: any): void;
export declare function serialize(gtx: GTX): Buffer;
export declare function deserialize(gtxBytes: Buffer): GTX;
export declare function checkGTXSignatures(txHash: Buffer, gtx: GTX): boolean;
